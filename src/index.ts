import { app, BrowserWindow, ipcMain, utilityProcess } from 'electron';
import { spawn } from "child_process";
import fetch from "node-fetch";
import path from "path";
import { name, expressPort } from "../package.json";
import { expr } from 'jquery';
import { URL } from "url";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const EXPRESS_APP_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// TODO: Implement proper logging instead of forwarding to renderer

const createWindow = async(): Promise<void> => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  const sleep = (ms: number) => new Promise(res => setTimeout(res, ms))
  await sleep(3000);
  try {
    const appName = app.getPath("exe");
    const expressPath = appName.endsWith(`${name}.exe`)
      ? path.join(process.resourcesPath, "express_app.js")
      : "./.webpack/main/express_app.js";
  
    mainWindow.webContents.send("express-log", "Starting express process: " + expressPath)
    const expressAppProcess = utilityProcess.fork(expressPath, [], {
      stdio: "pipe",
    });
    [expressAppProcess.stdout, expressAppProcess.stderr].forEach(redirectOutput);
    
    mainWindow.webContents.send("express-log", "Express running as pid: " + expressAppProcess.pid)
    mainWindow.on("closed", () => {
      mainWindow = null;
      expressAppProcess.kill()
    })
  } catch(error: any) {
    mainWindow.webContents.send("express-log", error.toString())
  }

};

const expressUrl = `http://localhost:${expressPort}`

function redirectOutput(stream: NodeJS.ReadableStream | null) {
  if (stream) {
    stream.on("data", (data: any) => {
      console.log(data.toString())
      mainWindow.webContents.send("express-log", data.toString());
    });
  }
}


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', function () {
  createWindow();
  console.log("Main is ready!");
  ipcMain.handle("get-express-app-url", () => expressUrl)
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
