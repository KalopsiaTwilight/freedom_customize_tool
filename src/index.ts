import { app, BrowserWindow, ipcMain, utilityProcess } from 'electron';
import log from 'electron-log/main'
import Store from "electron-store"
import path from "node:path";
import fs from "node:fs"
import { name, expressPort } from "../package.json";
import * as sqlite3 from "sqlite3";

import { setupDbIpc, setupPatchingIpc } from './ipc';
import { OnFirstStartChannel } from './ipc/channels';
import { AppDataStore } from './models';
import { setUpStoreIpc } from './ipc/store';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const EXPRESS_APP_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const isReleaseVer = app.getPath("exe").endsWith(`${name}.exe`);
log.initialize();

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Start express server
  try {
    const expressPath = isReleaseVer
      ? path.join(process.resourcesPath, "express_app.js")
      : "./.webpack/main/express_app.js";

    log.info("Starting express process: " + expressPath);
    const expressAppProcess = utilityProcess.fork(expressPath, [], {
      stdio: "pipe",
    });
    log.info("Express running as pid: " + expressAppProcess.pid)
    mainWindow.on("closed", () => {
      mainWindow = null;
      expressAppProcess.kill()
    })
  } catch (error: any) {
    log.error(error);
  }
};

const expressUrl = `http://localhost:${expressPort}`
// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', function () {
  createWindow();
  setupIpc();
  log.info("Main is ready!");
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

async function setupIpc() {
  // Setup IPC
  ipcMain.handle("get-express-app-url", () => expressUrl)

  const store = new Store<AppDataStore>({
    defaults: {
      freedomWoWRootDir: '',
      launchWoWAfterPatch: true,
      itemData: {
        itemMaterials: {},
        itemComponentModels: {
          "0": {
            texture: {
              id: -1,
              name: ""
            },
            models: []
          },
          "1": {
            texture: {
              id: -1,
              name: ""
            },
            models: []
          }
        },
        particleColors: [],
        helmetGeoVisMale: [],
        helmetGeoVisFemale: [],
        flags: 0,
        inventoryType: 1,
        geoSetGroup: [0, 0, 0, 0, 0]
      },
      previewCharacter: {
        "race": 11,
        "gender": 1,
        "customizations": [
          ({ optionId: 133, choiceId: 1959 }),
          ({ optionId: 134, choiceId: 1963 }),
          ({ optionId: 135, choiceId: 1983 }),
          ({ optionId: 136, choiceId: 2000 }),
          ({ optionId: 137, choiceId: 2011 }),
          ({ optionId: 619, choiceId: 6978 }),
          ({ optionId: 689, choiceId: 7703 }),
          ({ optionId: 697, choiceId: 7764 }),
          ({ optionId: 699, choiceId: 7791 }),
          ({ optionId: 701, choiceId: 7796 }),
          ({ optionId: 778, choiceId: 8643 })
        ]
      }
    }
  })
  setUpStoreIpc(store);

  const dbPath = isReleaseVer
    ? path.join(process.resourcesPath, "app.db")
    : "./src/packaged/app.db";
  const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, err => {
    if (err) {
      throw err;
    }
  });
  setupDbIpc(db);

  const toolPath = isReleaseVer
    ? path.join(process.resourcesPath, "DBXPatchTool.exe")
    : path.resolve("../WDBXEditor2/publish/DBXPatchTool.exe");
  setupPatchingIpc(toolPath, store);

  const sleep = (ms: number) => new Promise(res => setTimeout(res, ms))
  await sleep(3000);
  if (!store.get("freedomWoWRootDir")) {
    const freedomClientSettingsPath = path.join(app.getPath("appData"), "../Local/WoWFreedomClient/appstate.json");
    let suggestedPath = '';
    if (fs.existsSync(freedomClientSettingsPath)) {
      const settingsFile = await fs.promises.readFile(freedomClientSettingsPath);
      const appState = JSON.parse(settingsFile.toString());
      suggestedPath = appState.InstallPath;
    }
    mainWindow.webContents.send(OnFirstStartChannel, {
      suggestedDir: suggestedPath,
      launchWoWAfterPatch: store.get('launchWoWAfterPatch')
    })
  }
}

